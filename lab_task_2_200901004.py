# -*- coding: utf-8 -*-
"""Lab Task#2-200901004

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BFHWn-qbYUi_9CpcJyImiAO8todSdJMr
"""

import threading
import time
from collections import deque
class Food:
    buffer=deque()
    
    def __init__(self):
        self.buffer=deque()
    
    def enqueue(self,food):
            self.buffer.appendleft(food)

    def dequeue(self):
        if len(self.buffer)==0:
          print("Queue is empty!")
        else:
            return self.buffer.pop()

    def order(self,food):
       for i in food:
            
            print("Current order is: ",i)
            self.enqueue(i)
            time.sleep(0.5)

    def serve(self,food):
      for i in food:
                time.sleep(2.0)
                print("Serving: ", self.dequeue())

t=time.time()
f=Food()

menu=["Pizza","Samosa","Pasta","Biryani","Burger"]
print("\t \t \t M E N U \t \t \t")
for i in menu:
  print(i)
print("\n")

place_order=threading.Thread(target=f.order,args=(menu,))
serve_order=threading.Thread(target=f.serve,args=(menu,))

place_order.start()
time.sleep(1.0)
serve_order.start()

place_order.join()
print("\n")

serve_order.join()
print("\n")

total_time=time.time()-t
print("Total time taken= ",total_time)
print("\n")

print("Thank you for your cooperation!")

